import { param, Parameter, ValidateScript, System } from "powershell"
import { Color } from "term"

// Updates manifests and pushes them or creates pull-requests.
// DESCRIPTION:
//      Updates manifests and pushes them directly to the origin branch or creates pull-requests for upstream.
// EXAMPLE:
//     PS BUCKETROOT > .\bin\auto-pr.ps1 'someUsername/repository:branch' -Request
// EXAMPLE:
//     PS BUCKETROOT > .\bin\auto-pr.ps1 -Push
//     Update all manifests inside 'bucket/' directory.
param({
    // Upstream repository with the target branch.
    // Must be in format '<user>/<repo>:<branch>'
    @Parameter(Mandatory: true)
    @ValidateScript({ v: str =>
        if ! r'^(.*)\/(.*):(.*)$'.match(v) {
            throw 'Upstream must be in this format: <user>/<repo>:<branch>'
        }
        return true
    })
    Upstream: str,
    // Origin (local) branch name.
    OriginBranch: str = "master",
    // Manifest name to search.
    // Placeholders are supported.
    App: str = "*",
    // The format of the commit message.
    // <app> will be replaced with the file name of manifest.
    // <version> will be replaced with the version of the latest manifest.
    CommitMessageFormat: str = '<app>: Update to version <version>',
    @ValidateScript({ v: str =>
        if ! Test-Path $v --Type "Container" {
            throw "$v is not a directory!"
        }
        return true
    })
    // The directory where to search for manifests.
    Dir: str,
    // Push updates directly to 'origin branch'.
    Push: bool,
    // Create pull-requests on 'upstream branch' for each update.
    Request: bool,
    // Print help to console.
    Help: bool,
    // An array of manifests, which should be updated all the time. (-ForceUpdate parameter to checkver)
    SpecialSnowflakes: str[],
    // Updated manifests will not be shown.
    SkipUpdated: bool,
    // Throw error as exception instead of just printing it.
    ThrowError: bool
})

import "../lib/json.hl"
import "../lib/manifest.hl"

if ($App != '*' && $(Test-Path $App --PathType "Leaf")) {
    $Dir = $(Split-Path $App)
} else if ($Dir) {
    $Dir = $(Convert-Path $Dir)
} else {
    throw "'-Dir' parameter required if '-App' is not a filepath!"
}

if (!$Push && !$Request) || $Help {
    echo """
Usage: auto-pr.ps1 [OPTION]

Mandatory options:
  -p,  -push                       push updates directly to 'origin branch'
  -r,  -request                    create pull-requests on 'upstream branch' for each update

Optional options:
  -u,  -upstream                   upstream repository with target branch
  -o,  -originbranch               origin (local) branch name
  -h,  -help
"""
    exit 0
}

if $IsLinux || $IsMacOS {
    if ! $(which hub) {
        Write-Host "Please install hub ('brew install hub' or visit: https://hub.github.com/)" --ForegroundColor Color::Yellow
        exit 1
    }
} else {
    if ! $(scoop which hub) {
        Write-Host "Please install hub 'scoop install hub'" --ForegroundColor Color::Yellow
        exit 1
    }
}

fn execute($cmd) -> any {
    Write-Host $cmd --ForegroundColor Color::Green
    $output = ${Invoke-Command ([scriptblock]::Create({{&cmd}}))}

    if $LASTEXITCODE > 0 {
        abort "^^^ Error! See above ^^^ (last command: $cmd)"
    }

    return $output
}

fn pull_requests($json, [String] $app, [String] $upstream, [String] $manifest, [String] $commitMessage) {
    $version = $json.version
    $homepage = $json.homepage
    $branch = "manifest/$app-$version"

    execute "hub checkout $OriginBranch"
    Write-Host "hub rev-parse --verify $branch" --ForegroundColor Color::Green
    hub rev-parse --verify $branch

    if $LASTEXITCODE == 0 {
        Write-Host "Skipping update $app ($version) ..." --ForegroundColor Color::Yellow
        return
    }

    Write-Host "Creating update $app ($version) ..." --ForegroundColor Color::DarkCyan
    execute "hub checkout -b $branch"
    execute "hub add $manifest"
    execute "hub commit -m '$commitMessage"
    Write-Host "Pushing update $app ($version) ..." --ForegroundColor Color::DarkCyan
    execute "hub push origin $branch"

    if $LASTEXITCODE > 0 {
        error "Push failed! (hub push origin $branch)"
        execute 'hub reset'
        return
    }

    Start-Sleep 1
    Write-Host "Pull-Request update $app ($version) ..." -ForegroundColor DarkCyan
    Write-Host "hub pull-request -m '<msg>' -b '$upstream' -h '$branch'" -ForegroundColor Green

    $msg = """
$commitMessage

Hello lovely humans,
a new version of [$app]($homepage) is available.

| State       | Update :rocket: |
| :---------- | :-------------- |
| New version | $version        |
"""

    hub pull-request -m $msg -b $upstream -h $branch
    if $LASTEXITCODE > 0 {
        execute 'hub reset'
        abort "Pull Request failed! (hub pull-request -m '$commitMessage' -b '$upstream' -h '$branch')"
    }
}

Write-Host 'Updating ...' --ForegroundColor Color::DarkCyan
if $Push {
    execute "hub pull origin $OriginBranch"
    execute "hub checkout $OriginBranch"
} else {
    execute "hub pull upstream $OriginBranch"
    execute "hub push origin $OriginBranch"
}

& "./checkver.hl" --App $App --Dir $Dir --Update --SkipUpdated --ThrowError
if $SpecialSnowflakes {
    Write-Host "Forcing update on our special snowflakes: $(${SpecialSnowflakes.join(',')})" --ForegroundColor Color::DarkCyan
    $SpecialSnowflakes.split(',') | ForEach-Object { v: str =>
        & "./checkver.hl" $v --Dir $Dir --ForceUpdate --ThrowError
    }
}

hub diff --name-only | ForEach-Object {
    $manifest = $_
    if (!$manifest.EndsWith('.json')) {
        return
    }

    $app := System::IO::Path::GetFileNameWithoutExtension($manifest)
    $json = parse_json $manifest
    if (!$json.version) {
        error "Invalid manifest: $manifest ..."
        return
    }
    $version = $json.version
    $CommitMessage = $CommitMessageFormat --replace '<app>',$app --replace '<version>',$version
    if ($Push) {
        Write-Host "Creating update $app ($version) ..." -ForegroundColor DarkCyan
        execute "hub add $manifest"

        // detect if file was staged, because it's not when only LF or CRLF have changed
        $status = execute 'hub status --porcelain -uno'
        $status = $status | Where-Object { $_ -match "M\s{2}.*$app.json" }
        if ($status && $status.StartsWith('M  ') && $status.EndsWith("$app.json")) {
            execute "hub commit -m '$commitMessage'"
        } else {
            Write-Host "Skipping $app because only LF/CRLF changes were detected ..." -ForegroundColor Yellow
        }
    } else {
        pull_requests $json $app $Upstream $manifest $CommitMessage
    }
}

if $Push {
    Write-Host 'Pushing updates ...' --ForegroundColor Color::DarkCyan
    execute "hub push origin $OriginBranch"
} else {
    Write-Host "Returning to $OriginBranch branch and removing unstaged files ..." --ForegroundColor Color::DarkCyan
    execute "hub checkout -f $OriginBranch"
}

execute 'hub reset --hard'
