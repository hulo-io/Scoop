// Convert objects to pretty json
// Only needed until PowerShell ConvertTo-Json will be improved https://github.com/PowerShell/PowerShell/issues/2736
// https://github.com/PowerShell/PowerShell/issues/2736 was fixed in pwsh
// Still needed in normal powershell

import { psobject, System, Parameter, CmdletBinding } from "powershell"

@CmdletBinding()
fn ConvertToPrettyJson(
    @Parameter(Mandatory: true, ValueFromPipeline: true)
    data: any
) {

    Process {
        $data = normalize_values $data

        // convert to string
        [String]$json = $data | ConvertTo-Json -Depth 8 -Compress
        [String]$output = ''

        // state
        [String]$buffer = ''
        [Int]$depth = 0
        [Bool]$inString = $false

        // configuration
        [String]$indent = ' ' * 4
        [Bool]$unescapeString = $true
        [String]$eol = "`r`n"

        loop $i := 0; $i < $json.Length; $i++ {
            // read current char
            $buffer = $json.Substring($i, 1)

            $objectStart = !$inString && $buffer.Equals('{')
            $objectEnd = !$inString && $buffer.Equals('}')
            $arrayStart = !$inString && $buffer.Equals('[')
            $arrayEnd = !$inString && $buffer.Equals(']')
            $colon = !$inString && $buffer.Equals(':')
            $comma = !$inString && $buffer.Equals(',')
            $quote = $buffer.Equals('"')
            $escape = $buffer.Equals('\\')

            if $quote {
                $inString = !$inString
            }

            // skip escape sequences
            if ($escape) {
                $buffer = $json.Substring($i, 2)
                ++$i

                // Unescape unicode
                if ($inString -and $unescapeString) {
                    if ($buffer.Equals('\n')) {
                        $buffer = "`n"
                    } else if ($buffer.Equals('\r')) {
                        $buffer = "`r"
                    } else if ($buffer.Equals('\t')) {
                        $buffer = "`t"
                    } else if ($buffer.Equals('\u')) {
                        $buffer = [regex]::Unescape($json.Substring($i - 1, 6))
                        $i += 4
                    }
                }

                $output += $buffer
                continue
            }

            // indent / outdent
            if ($objectStart || $arrayStart) {
                ++$depth
            } else if ($objectEnd || $arrayEnd) {
                --$depth
                $output += $eol + ($indent * $depth)
            }

            // add content
            $output += $buffer

            // add whitespace and newlines after the content
            if ($colon) {
                $output += ' '
            } else if ($comma || $arrayStart || $objectStart) {
                $output += $eol
                $output += $indent * $depth
            }
        }

        return $output
    }
}

fn json_path(json: str, jsonpath: str, substitutions: map, reverse: bool, single: bool) {
    Add-Type --Path "../supporting/validator/bin/Newtonsoft.Json.dll"
    if (null != $substitutions) {
        $jsonpath = substitute $jsonpath $substitutions ($jsonpath -like "*=~*")
    }
    try {
        $settings := New-Object --Type "Newtonsoft.Json.JsonSerializerSettings"
        $settings.DateParseHandling = Newtonsoft::Json::DateParseHandling::None
        $obj = Newtonsoft::Json::JsonConvert::DeserializeObject(json, settings)
    } catch Newtonsoft::Json::JsonReaderException {
        return null
    }
    try {
        $result = $obj.SelectTokens($jsonpath, $true)
        if ($reverse) {
            // Return versions in reverse order
            $result = System::Linq::Enumerable::Reverse($result)
        }
        if System::Linq::Enumerable::Count($result) == 1 || $single {
            // Extract First value
            $result = System::Linq::Enumerable::First($result)
            // Convert first value to string
            $result = $result.ToString()
        } else {
            $result = Newtonsoft::Json::JsonConvert::SerializeObject($result)
        }
        return $result
    } catch Exception {
        Write-Host $_ --ForegroundColor Color::DarkRed
    }

    return $null
}

fn json_path_legacy(json: str, jsonpath: str, substitutions: map) {
    $result = $json | ConvertFrom-Json -ea stop
    $isJsonPath = $jsonpath.StartsWith('$')
    $jsonpath.split('.') | ForEach-Object {
        $el = $_

        // substitute the basename and version varibales into the jsonpath
        if ($null != $substitutions) {
            $el = substitute $el $substitutions
        }

        // skip $ if it's jsonpath format
        if ($el == '$' || $isJsonPath) {
            return
        }

        // array detection
        if r'^(?<property>\w+)?\[(?<index>\d+)\]$'.match(el) {
            $property = $matches['property']
            if ($property) {
                $result = $result.$property[$matches['index']]
            } else {
                $result = $result[$matches['index']]
            }
            return
        }

        $result = $result.$el
    }
    return $result
}

fn normalize_values(json: psobject) -> any {
    // Iterate Through Manifest Properties
    $json.PSObject.Properties | ForEach-Object {
        // Recursively edit psobjects
        // If the values is psobjects, its not normalized
        // For example if manifest have architecture and it's architecture have array with single value it's not formatted.
        // @see https://github.com/ScoopInstaller/Scoop/pull/2642#issue-220506263
        if $_.Value is System::Management::Automation::PSCustomObject {
            $_.Value = normalize_values $_.Value
        }

        // Process String Values
        if $_.Value is str {

            // Split on new lines
            $parts = ($_.Value -split '\r?\n').Trim() as Array

            // Replace with string array if result is multiple lines
            if $parts.Count > 1 {
                $_.Value = $parts
            }
        }

        // Convert single value array into string
        if $_.Value is Array {
            // Array contains only 1 element String or Array
            if $_.Value.Count == 1 {
                // Array
                if $_.Value[0] is Array {
                    $_.Value = $_.Value
                } else {
                    // String
                    $_.Value = $_.Value[0]
                }
            } else {
                // Array of Arrays
                $resulted_arrs = []
                loop $element in $_.Value {
                    if $element.Count == 1 {
                        $resulted_arrs += $element
                    } else {
                        $resulted_arrs += , $element
                    }
                }

                $_.Value = $resulted_arrs
            }
        }

        // Process other values as needed...
    }

    return $json
}
